import { Injectable } from '@nestjs/common';
import { spawn } from 'child_process';
import { Response } from 'express';
import { exec } from 'youtube-dl-exec';


@Injectable()
export class DownloadService {
  async downloadVideo(videoUrl: string, res: Response) {
    try {
      if (!videoUrl || typeof videoUrl !== 'string') {
        throw new Error('рдЕрдорд╛рдиреНрдп YouTube URL');
      }

      console.log('ЁЯОе рд╡реАрдбрд┐рдпреЛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рдиреЗ рдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд╢реБрд░реВ: ', videoUrl);

      // Response рдХреЗ рд▓рд┐рдП HTTP рд╣реЗрдбрд░ рд╕реЗрдЯ рдХрд░реЗрдВ
      res.setHeader('Content-Disposition', 'attachment; filename="video.mp4"');
      res.setHeader('Content-Type', 'video/mp4');

      // `yt-dlp` рдХреЛ рдХрдорд╛рдВрдб-рд▓рд╛рдЗрди рд╕реЗ рдЪрд▓рд╛рдПрдБ
      const process = spawn('yt-dlp', ['-o', '-', '-f', 'best', videoUrl]);

      // рдЖрдЙрдЯрдкреБрдЯ рдХреЛ рдбрд╛рдпрд░реЗрдХреНрдЯ рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рдореЗрдВ рднреЗрдЬреЗрдВ (рдбрд╛рдпрд░реЗрдХреНрдЯ рдбрд╛рдЙрдирд▓реЛрдб)
      process.stdout.pipe(res);

      // рдПрд░рд░ рд╣реИрдВрдбрд▓рд┐рдВрдЧ
      process.stderr.on('data', (data) => {
        console.error('тЭМ yt-dlp рддреНрд░реБрдЯрд┐:', data.toString());
      });

      process.on('exit', (code) => {
        console.log(`тЬЕ yt-dlp рд╕рдорд╛рдкреНрдд, рдХреЛрдб: ${code}`);
      });

    } catch (error) {
      console.error('тЭМ рдбрд╛рдЙрдирд▓реЛрдб рддреНрд░реБрдЯрд┐:', error.message);
      res.status(500).send(`рд╡реАрдбрд┐рдпреЛ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛: ${error.message}`);
    }
  }

  // async downloadAudio(videoUrl: string, res: Response) {
  //   try {
  //     if (!videoUrl || typeof videoUrl !== 'string') {
  //       throw new Error('рдЕрдорд╛рдиреНрдп YouTube URL');
  //     }

  //     console.log('ЁЯО╡ рдСрдбрд┐рдпреЛ рдбрд╛рдЙрдирд▓реЛрдб рд╢реБрд░реВ: ', videoUrl);

  //     // Response рдХреЗ рд▓рд┐рдП HTTP рд╣реЗрдбрд░ рд╕реЗрдЯ рдХрд░реЗрдВ
  //     res.setHeader('Content-Disposition', 'attachment; filename="audio.mp3"');
  //     res.setHeader('Content-Type', 'audio/mpeg');

  //     // `yt-dlp` рдХреЛ MP3 рдбрд╛рдЙрдирд▓реЛрдб рдХреЗ рд▓рд┐рдП рдХрдорд╛рдВрдб-рд▓рд╛рдЗрди рд╕реЗ рдЪрд▓рд╛рдПрдБ
  //     const process = spawn('yt-dlp', ['-o', '-', '-f', 'bestaudio', '--extract-audio', '--audio-format', 'mp3', videoUrl]);

  //     // рдЖрдЙрдЯрдкреБрдЯ рдХреЛ рдбрд╛рдпрд░реЗрдХреНрдЯ рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рдореЗрдВ рднреЗрдЬреЗрдВ (рдбрд╛рдпрд░реЗрдХреНрдЯ MP3 рдбрд╛рдЙрдирд▓реЛрдб)
  //     process.stdout.pipe(res);

  //     // рдПрд░рд░ рд╣реИрдВрдбрд▓рд┐рдВрдЧ
  //     process.stderr.on('data', (data) => {
  //       console.error('тЭМ yt-dlp рддреНрд░реБрдЯрд┐:', data.toString());
  //     });

  //     process.on('exit', (code) => {
  //       console.log(`тЬЕ yt-dlp рд╕рдорд╛рдкреНрдд, рдХреЛрдб: ${code}`);
  //     });

  //   } catch (error) {
  //     console.error('тЭМ рдбрд╛рдЙрдирд▓реЛрдб рддреНрд░реБрдЯрд┐:', error.message);
  //     res.status(500).send(`MP3 рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛: ${error.message}`);
  //   }
  // }


  //2sw
  async downloadAudio(videoUrl: string, res: Response) {
    try {
      if (!videoUrl || typeof videoUrl !== 'string') {
        throw new Error('рдЕрдорд╛рдиреНрдп YouTube URL');
      }

      console.log('ЁЯО╡ рдСрдбрд┐рдпреЛ рдбрд╛рдЙрдирд▓реЛрдб рд╢реБрд░реВ: ', videoUrl);

      // HTTP рд╣реЗрдбрд░ рд╕реЗрдЯ рдХрд░реЗрдВ
      res.setHeader('Content-Disposition', 'attachment; filename="audio.mp3"');
      res.setHeader('Content-Type', 'audio/mpeg');

      // Render рдкрд░ yt-dlp рдХреЛ Python рд╕реЗ рдХреЙрд▓ рдХрд░реЗрдВ
      const process = spawn('python3', ['-m', 'yt_dlp', '-o', '-', '-f', 'bestaudio', '--extract-audio', '--audio-format', 'mp3', videoUrl]);

      process.stdout.pipe(res);

      process.stderr.on('data', (data) => {
        console.error('тЭМ yt-dlp рддреНрд░реБрдЯрд┐:', data.toString());
      });

      process.on('exit', (code) => {
        console.log(`тЬЕ yt-dlp рд╕рдорд╛рдкреНрдд, рдХреЛрдб: ${code}`);
      });

    } catch (error) {
      console.error('тЭМ рдбрд╛рдЙрдирд▓реЛрдб рддреНрд░реБрдЯрд┐:', error.message);
      res.status(500).send(`MP3 рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛: ${error.message}`);
    }
  } 
}
